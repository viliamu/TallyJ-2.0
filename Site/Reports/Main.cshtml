@using TallyJ.Code
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@using TallyJ.CoreModels
@using TallyJ.EF
@model ResultSummary
@{
  var currentElection = UserSession.CurrentElection;

  var result = new ResultCacher().AllForThisElection
    .OrderBy(r => r.Rank)
    .Take(currentElection.NumberToElect.AsInt() + currentElection.NumberExtra.AsInt())
    .ToList()
    .Join(new PersonCacher().AllForThisElection,
      r => r.PersonGuid,
      p => p.PersonGuid,
      (result1, person) => new { person, result1 })
    .ToList();

  var rows = result.Select(rp => new
  {
    Name = rp.person.FullName,
    rp.person.BahaiId,
    Rank = rp.result1.Section == ResultHelper.Section.Extra
      ? "Next " + rp.result1.RankInExtra
      : rp.result1.Rank.ToString(),
    VoteCountPlus = rp.result1.VoteCount.GetValueOrDefault() +
                    (rp.result1.IsTied.GetValueOrDefault() && rp.result1.TieBreakCount.GetValueOrDefault() > 0
                      ? " / {0}".FilledWith(rp.result1.TieBreakCount)
                      : ""),
  }).ToList();

}
<style>
  table.result1 {
    margin-left: 10px;
    border-collapse: collapse;
  }

    table.result1 td, table.result1 th {
      text-align: center;
      border: 1px solid gray;
      padding: 1px 10px;
    }

    table.result1 tr td:nth-child(2) {
      text-align: left;
    }
</style>
@if (rows.Count > 9)
{
  <style>
  </style>
}
<div class="body">
  <div class="body">
    <h2>
      @currentElection.Name
    </h2>
    <table class="resultInfo">
      <tr>
        <td>
          Number of eligible voters
        </td>
        <td>
          @Model.NumEligibleToVote
        </td>
      </tr>
      <tr class="rpt1Detail">
        <td>
          Number of ballots cast in person
        </td>
        <td>
          @Model.InPersonBallots
        </td>
      </tr>
      <tr class="rpt1Detail">
        <td>
          Number of ballots received by mail
        </td>
        <td>
          @Model.MailedInBallots
        </td>
      </tr>
      <tr class="rpt1Detail">
        <td>
          Number of hand-delivered ballots
        </td>
        <td>
          @Model.DroppedOffBallots
        </td>
      </tr>
      <tr class="rpt1Detail @(Model.CalledInBallots == 0 ? "Hidden" : "")">
        <td>
          Number of phoned-in ballots
        </td>
        <td>
          @Model.CalledInBallots
        </td>
      </tr>
      <tr class="rpt1Total">
        <td>
          Total number of ballots received
        </td>
        <td>
          @Model.SumOfEnvelopesCollected
        </td>
      </tr>
      <tr class="rpt1Detail Warning @(Model.SumOfEnvelopesCollected == Model.NumBallotsWithManual ? "Hidden" : "")">
        <td>
          Total number of ballots processed
        </td>
        <td>
          @Model.NumBallotsWithManual
        </td>
      </tr>
      <tr class="rpt1Detail">
        <td>
          Percentage of participation
        </td>
        <td>
          @((Model.PercentParticipation / 100.0).ToString("P0"))
        </td>
      </tr>
      <tr class="rpt1Detail">
        <td>
          Number of spoiled ballots
        </td>
        <td>
          @Model.SpoiledBallots
        </td>
      </tr>
      <tr class="rpt1Detail">
        <td>
          Number of spoiled votes
        </td>
        <td>
          @Model.SpoiledVotes
        </td>
      </tr>
    </table>
    <h2 class="SectionTitle">
      Elected
    </h2>
    <table class="result1">
      <thead>
        <tr>
          <th>#</th>
          <th>Name</th>
          <th>Bahá'í Id</th>
          <th>Votes</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var row in rows)
      {
          <tr>
            <td>@row.Rank</td>
            <td>@row.Name</td>
            <td>@row.BahaiId</td>
            <td>@row.VoteCountPlus</td>
          </tr>
        }
      </tbody>
    </table>
  </div>
