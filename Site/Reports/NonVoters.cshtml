@using System.Web;
@using TallyJ.Code.Enumerations
@using TallyJ.Code
@using TallyJ.Code.Session
@using TallyJ.EF
@using TallyJ.CoreModels
@inherits RazorEngine.Templating.TemplateBase
@{
  var people = new PersonCacher().AllForThisElection
    .Where(p => p.CanVote.HasValue && p.CanVote.Value)
    .Where(p => p.VotingMethod.HasNoContent() && p.CanVote.HasValue && p.CanVote.Value)
    .OrderBy(p => p.FullName)
    .Select(p => new
    {
      PersonName = p.FullName,
    });
}
<style>
  .Voters {
    -webkit-column-width: 15em;
    -moz-column-width: 15em;
    -ms-column-width: 15em;
    -o-column-width: 15em;
    column-width: 15em;
    -webkit-column-gap: 1em;
    -moz-column-gap: 1em;
    -ms-column-gap: 1em;
    -o-column-gap: 1em;
    column-gap: 1em;
    -webkit-column-rule-width: 4px;
    -moz-column-rule-width: 4px;
    -ms-column-rule-width: 4px;
    -o-column-rule-width: 4px;
    column-rule-width: 4px;
  }

  b {
    display: inline-block;
  }
  .person {
    position: relative;
  }
  .person.first {
    margin-top: .5em;
  }
</style>
<div class="body">
  <h1 id="title"></h1>
  <p class="Comment">
    Showing who was <b>not</b> registered on the Front Desk as a voter in this election.
  </p>
  <div class="Voters">
    @{
      var initial = ' ';
    }
    @foreach (var person in people)
    {
      var name = person.PersonName;
      var first = name.ToUpper()[0];
      var firstClass = "";
      if (first != initial)
      {
        initial = first;
        name = "<b>" + initial + "</b>" + name.Substring(1);
        firstClass = " first";
      }
      
      <div class="person @firstClass">
        <span class="name">@Raw(name)</span>
      </div>
    }
  </div>
</div>