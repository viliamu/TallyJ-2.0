@model ImportCsvModel
@using TallyJ.Code.Enumerations
@using TallyJ.Code.Session
@{
  ContextItems.AddJavascriptForPage("importHubUrl", "importCsvPage.importHubUrl={0};".FilledWith(@Url.Action("ImportHub", "Elections").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("controllerUrl", "importCsvPage.controllerUrl={0};".FilledWith(@Url.Action("Index", "Setup").QuotedForJavascript()));
  ContextItems.AddJavascriptForPage("previous", "importCsvPage.previousFiles={0};".FilledWith(Model.PreviousUploads().SerializedAsJsonString()));
  ContextItems.AddJavascriptForPage("statusNames", "importCsvPage.statusNames={0};".FilledWith(IneligibleReasonEnum.ReasonNamesForImportPage().SerializedAsJsonString()));
  ViewBag.Title = "Import Names";
}
<script src="@Url.Content("~/Scripts/fileuploader.js")" type="text/javascript"></script>
<div class="PullInstructions">
  <ol>
    <li>
      When using TallyJ, the list of adults in the community who are eligible to vote,
      or be voted for, can be loaded using this page.
    </li>
    <li>
      To load the list of names, you must first prepare a comma-separated value (CSV file)
      with all the people's names in it.<ul>
        <li>The first line of the file must be a "headers row" with the names of each column. The headers should not include any accented words, such Bah&aacute;'&iacute;...</li>
        <li>
          The file should be saved as a normal Windows text/CSV file, or using UTF-8 or UTF-16
          encoding.
        </li>
      </ul>
    </li>
    <li>
      This file must only contain the names of eligible adults. If it includes children
      and youth, or people no longer in the community or not eligible to vote, you should
      fix the CSV file before uploading it.
      <ul>
        <li>
          If the file is exported from a database or other tool, see if you can export it
          again, with only the eligible adults included.
        </li>
        <li>
          You can also open the CSV file with a spreadsheet program, like Microsoft Excel,
          and edit it there.
        </li>
      </ul>
    </li>
    <li>
      Once the CSV is ready to upload and process, proceed to Step 1 below to upload the
      file.
    </li>
    <li>
      In TallyJ, each person has a First and Last name. They also have other optional
      fields for more information, such as a maiden name or nickname. These fields are
      listed below. For each of the columns from the CSV file, select which TallyJ field
      it should be put into, if any.
    </li>
    <li>
      If you find that accented characters are not being processed correctly, you may
      need to change the Content Encoding and try Importing again.
    </li>
  </ol>
</div>
<h2>
  Step 1: Upload the CSV file
</h2>
<p>
  Click the button below to choose and upload a file, or drag the file from Windows
  Explorer to this window.
</p>
<div id="file-uploader">
</div>
<div class="uploadList">
  <h4>
    Files on Server
  </h4>
  <table>
    <thead>
      <tr>
        <th>
          Action
        </th>
        <th>
          Status
        </th>
        <th>
          Name
        </th>
        <th>
          Content Encoding
        </th>
        <th>
          Upload Time
        </th>
        <th>
          Size
        </th>
        <th>
          Other Actions
        </th>
      </tr>
    </thead>
    <tbody id="uploadListBody">
      <tr data-rowid="{C_RowId}" class="{ProcessingStatus} {RowClass}">
        <td class="Actions">
          <div class="MakeActive" title="Select this file for mapping columns and importing people">Select</div>
          <div class="CopyMap" title="Copy the column mapping information from this file to the selected one">Copy Mapping</div>
          <span>(selected)</span>
        </td>
        <td>
          {ProcessingStatusAndSteps}
        </td>
        <td>
          {OriginalFileName}
        </td>
        <td>
          <select data-value="{CodePage}">
            @ImportHelper.Encodings.Select(kvp => "<option value='{0}'>{1}</option>".FilledWith(kvp.Key, kvp.Value)).JoinedAsString().AsRawHtml()
          </select>
        </td>
        <td>
          {UploadTimeExt}
        </td>
        <td>
          {FileSize}
        </td>
        <td>
          <button type="button" class="download" title="Download a copy of this file">
            <span class="ui-icon ui-icon-arrowreturn-1-s"></span>
          </button>
          <button type="button" class="deleteFile" title="Permanently delete this from the server">
            <span class="ui-icon ui-icon-trash"></span>
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
<h2>
  Step 2: Map columns
</h2>
<p>
  The columns in <span id="activeFileName"></span> must be mapped. If you have already done that, it does not need to be done again.
  If you do need to determine the mapping, the columns found in the file are shown here, with the content from the few lines.
  For each column to include when importing the people, select the TallyJ field it should be mapped to.
</p>
<div class="fieldSelector">
  <button type="button" id="btnPrepareFields">
    Re-analyze the file and get column names
  </button>
  <div id="fieldSelector">
  </div>
  <div id="mappingError"></div>
</div>
<p>
  To preset the "Eligibility Status" of anyone being imported, map a colum to the Eligibility Status field. The values in the file
  must exactly match one of the reasons below. (View the list below; click to copy a Reason.) Leave their Eligibility Status blank to use the default for this election.
</p>
<div class="PullInstructions" data-title="Eligibility Status Reasons">
  <div class="reasonExamples">
    <div>
      <h3>Allowed Status Reasons</h3>
      <div id="listOfStatusReasons"></div>
    </div>
    <div class="reasonSamples">
      <h3>Samples</h3>
      <dl>
        <dt>For a normal election</dt>
        <dd>All voters should be blank</dd>
        <dd>Others (youth, moved recently, etc) should have an appropriate status reason.</dd>
        <dt>For a by-election</dt>
        <dd>Set those being voted for to blank</dd>
        <dd>All others should be "Tie-break: Not tied"</dd>
        <dt>For a National Convention</dt>
        <dd>Delegates should be blank</dd>
        <dd>People that can be voted for should be "Not a delegate in this election"</dd>
        <dd>Others (youth, recently or died, etc) should have an appropriate status reason.</dd>
      </dl>
    </div>
  </div>
</div>

<h2>
  Step 3: Import people
</h2>
<p>
  All the records in the file will be processed and added to the names already in the database. Any that match exactly will not be added again.
  If you need to erase all the currently loaded names before ballots are entered, use the "Delete all People Records" below before importing again.
</p>
<div>
  <button type="button" id="btnImport">
    Import now
  </button>
  <div id="importResults">
  </div>
  <button type="button" id="btnClearAll" class="float-right">
    Delete all People Records
  </button>
</div>
